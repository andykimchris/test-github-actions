name: Hub V2 CI-CD

on:
  push:
    branches: ["*"]
    # branches:
    #   - master
    #   - development
    #   - 'release/**'
  pull_request:
    branches: [main, master]


jobs:
  test:
    name: Tests and Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['2.6']
    services:
      postgres:
        image: postgres:11.6-alpine
        env:
          POSTRGES_PASSWORD: postgres
        ports: ["5432:5432"]
          # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Ruby Setup with test version
      uses: eregon/use-ruby-action@master # defaults to .ruby-version file in repository
      # uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6.3
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    - name: Install Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - run: npm install
  

    - name: Install PostgreSQL client
      run: |
        sudo apt-get -yqq install libpq-dev
       
    - name: Start Redis
      uses: supercharge/redis-github-action@1.2.0
      with:
        redis-version: ${{ matrix.redis-version }}
  
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Copy files to the test website with the AWS CLI
      run: |
        aws s3 sync . s3://my-s3-test-website-bucket

    - name: Configure AWS credentials from Production account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Copy files to the production website with the AWS CLI
      run: |
        aws s3 sync . s3://my-s3-prod-website-bucket
    
